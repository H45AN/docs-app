#!/usr/bin/env bash
#
# Phalcon
# Copyright (c) 2017 Phalcon Team (https://phalconphp.com)
#
# This source file is subject to the New BSD License that is bundled
# with this package in the file LICENSE.txt.
#
# If you did not receive a copy of the license and are unable to
# obtain it through the world-wide-web, please send an email
# to license@phalconphp.com so we can send you a copy immediately.
#

# trace ERR through pipes
set -o pipefail

# trace ERR through 'time command' and other functions
set -o errtrace

# set -e : exit the script if any statement returns a non-true return value
set -o errexit

CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

DOCS_REPO=https://github.com/phalcon/docs
CPHALCON_REPO=https://github.com/phalcon/cphalcon

DOCS_PATH="${DOCS_PATH:-${CURRENT_DIR}/docs}"
API_PATH="${API_PATH:-${CURRENT_DIR}/storage/repo}"

ST_OK=0
ST_ERR=1
ST_HLP=2

GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\e[1;33m"
PURPLE="\e[0;35m"
NC="\033[0m"

INSTALL_DEPS=1
REGENERATE_API=1
UPDATE_DOCS=1

VERSION=0.2.0
APP_NAME="Phalcon Docs"

print_version() {
    printf "${YELLOW}${APP_NAME} Deploy Script${NC} v${VERSION}\n"
}

print_dump_version() {
    printf "${VERSION}\n"
}

print_help() {
    printf "${YELLOW}Description:${NC}"
    printf "\n${APP_NAME} Deploy Script is a source code deploying script.\n"
    printf "\nUsage: ${PURPLE}./deploy [options]${NC}\n"
    printf "\n${YELLOW}Options:${NC}"
    printf "\n      --[no-]install-deps    Install the application dependencies using the Composer. (enabled by default)."
    printf "\n      --[no-]generate-api    Regenerate the API docs for all known versions (enabled by default)."
    printf "\n      --[no-]update-docs     Update the documentation for all known versions. (enabled by default)."
    printf "\n  -H, --help                 Show this help message."
    printf "\n  -V, --version              Show only version number and exit."
    printf "\n      --dumpversion          Show the version and exit."
    printf "\n"
}

print_unknown_option() {
    printf "Invalid option: ${RED}${1}${NC}.\n"
    printf "See${NC} ./deploy --help for more.\n"
}

install_app_deps() {
    declare composer_bin
}

while test -n "$1"; do
    case $1 in
        --help|-H)
            print_help
            exit ${ST_HLP}
            ;;
        --version|-V)
            print_version
            exit ${ST_HLP}
            ;;
        --dumpversion)
            print_dump_version
            exit ${ST_HLP}
            ;;
        --install-deps)
            INSTALL_DEPS=1
            ;;
        --no-install-deps)
            INSTALL_DEPS=0
            ;;
        --generate-api)
            REGENERATE_API=1
            ;;
        --no-generate-api)
            REGENERATE_API=0
            ;;
        --update-docs)
            UPDATE_DOCS=1
            ;;
        --no-update-docs)
            UPDATE_DOCS=0
            ;;
        *)
            print_unknown_option $1
            exit ${ST_HLP}
            ;;
    esac
    shift
done

ref=$(git rev-parse --abbrev-ref HEAD)

echo -e "Current branch is ${ref}"

if [[ ${ref} != master ]]; then
    echo "Doing nothing: only the master branch may be deployed for this project"
    exit 0
fi

echo -e "Pull the latest changes from the git repo..."
git checkout -f
git pull origin ${ref}

if [[ ! -f "${CURRENT_DIR}/VERSIONS" ]]; then
	echo -e "Unable to locate the VERSIONS file. Exit..."
	exit 1
fi

echo -e ""

while IFS= read -r version; do
    echo -e "Clear the docs folder..."
    rm -rf "${DOCS_PATH}/${version}"
    mkdir -p "${DOCS_PATH}/${version}"

    echo -e "Update the docs for ${version}..."
    echo -e "git clone -q -b ${version} --depth=1 ${DOCS_REPO}" "${DOCS_PATH}/${version}"
    echo -e "Done\n"

    echo -e "Clear the repo folder for ${version}..."
    find ${API_PATH} ! -name '.gitignore' ! -path ${API_PATH}  -exec rm -rf {} \;
    mkdir -p "${API_PATH}"

    echo -e "Clone cphalcon's $version branch..."
    echo -e "TODO: git clone -q -b ${version}.0 --depth=1 ${CPHALCON_REPO} ${API_PATH}"
    echo -e "TODO: regenerate the API doc"
    echo -e "TODO: copy the generated API doc to the ${DOCS_PATH}/${version}/en/api"
    echo -e "Done\n"
done < "${CURRENT_DIR}/VERSIONS"

echo -e "Clear the cache..."
./phalcon -clear-cache
