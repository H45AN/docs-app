#!/usr/bin/env bash
#
# Phalcon
# Copyright (c) 20111-2017 Phalcon Team (https://phalconphp.com)
#
# This source file is subject to the New BSD License that is bundled
# with this package in the file LICENSE.txt.
#
# If you did not receive a copy of the license and are unable to
# obtain it through the world-wide-web, please send an email
# to license@phalconphp.com so we can send you a copy immediately.
#

# trace ERR through pipes
set -o pipefail

# trace ERR through 'time command' and other functions
set -o errtrace

# set -e : exit the script if any statement returns a non-true return value
set -o errexit

CURRENT_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
WORK_DIR=${CURRENT_DIR}

GIT_BIN=$(command -v git 2>/dev/null)

DOCS_REPO=https://github.com/phalcon/docs
CPHALCON_REPO=https://github.com/phalcon/cphalcon

ST_OK=0
ST_ERR=1
ST_HLP=2

GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\e[1;33m"
PURPLE="\e[0;35m"
NC="\033[0m"

INSTALL_DEPS=1
REGENERATE_API=1
UPDATE_DOCS=1
PULL_CHANGES=1

VERSION=0.8.0
APP_NAME="Phalcon Docs"

print_version() {
    printf "${YELLOW}${APP_NAME} Deployer${NC} v${VERSION}\n"
}

print_dump_version() {
    printf "${VERSION}\n"
}

print_help() {
    printf "\n${YELLOW}Usage:${NC}"
    printf "\n./deploy [options]\n"
    printf "\n${YELLOW}Options:${NC}"
    printf "\n      ${GREEN}--[no-]install-deps${NC}        Install the application dependencies using the Composer. (enabled by default)."
    printf "\n      ${GREEN}--[no-]generate-api${NC}        Regenerate the API docs for all known versions (enabled by default)."
    printf "\n      ${GREEN}--[no-]update-docs${NC}         Update the documentation for all known versions (enabled by default)."
    printf "\n      ${GREEN}--[no-]pull-changes${NC}        Pull the latests changes from the git repo (enabled by default)."
    printf "\n  ${GREEN}-L, --list-versions${NC}            List known docs versions."
    printf "\n  ${GREEN}-H, --help${NC}                     Show this help message."
    printf "\n  ${GREEN}-V, --version${NC}                  Show the version and exit."
    printf "\n      ${GREEN}--dumpversion${NC}              Show only version number and exit."
    printf "\n      ${GREEN}--working-dir=WORKING-DIR${NC}  If specified, use the given directory as working directory."
    printf "\n"
    printf "\n${YELLOW}Help:${NC}"
    printf "\n${APP_NAME} Deployer is a source code deploying script."
    printf "\n\n"
}

print_unknown_option() {
    print_error "Error: Unknown option: ${1}." >&2
    print_error "See ./deploy --help for more."
}

print_error() {
    printf "${RED}${1}${NC}\n"
}

validate_work_dir() {
    if [[ ! -d  ${WORK_DIR} ]]; then
        print_error "Unable to locate specified path as working directory: ${WORK_DIR}. Exit..."
        exit ${ST_ERR}
    fi
}

validate_versions() {
    if [[ ! -f "${WORK_DIR}/VERSIONS" ]]; then
        echo -e "Unable to locate the VERSIONS file. Exit..."
        exit ${ST_ERR}
    fi
}

validate_git_bin() {
    if [[ "x${GIT_BIN}" == "x" ]]; then
        print_error "Unable to detect the git bin. Exit..."
        exit ${ST_ERR}
    fi
}

install_app_deps() {
    declare composer_bin=$(command -v composer 2>/dev/null)

    if [[ "x${composer_bin}" == "x" ]]; then
        print_error "Unable to detect the composer bin. Exit..."
        exit ${ST_ERR}
    fi

    pushd ${WORK_DIR}

    ${composer_bin} install \
        --quiet \
        --no-interaction \
        --no-ansi \
        --no-progress \
        --optimize-autoloader \
        --no-dev \
        --prefer-dist \
        --no-suggest \
        --ignore-platform-reqs

    popd
}

print_versions() {
    validate_versions

    cat "${WORK_DIR}/VERSIONS"
}

update_docs() {
    validate_git_bin

    declare docs_path="${WORK_DIR}/docs"
    declare versions=$(print_versions)

    if [[ ! -d ${docs_path} ]]; then
        print_error "Unable to locate the docs base directory"
        exit ${ST_ERR}
    fi

    for version in ${versions}; do
        printf "Update the docs for ${version}...\n"
        rm -rf "${docs_path}/${version}"
        mkdir -p "${docs_path}/${version}"
        ${GIT_BIN} clone -q -b ${version} --depth=1 "${DOCS_REPO}" "${docs_path}/${version}"
        printf "Done\n"
    done
}

update_api() {
    validate_git_bin

    declare docs_path="${WORK_DIR}/docs"
    declare api_path="${WORK_DIR}/storage/repo"
    declare versions=$(print_versions)

    if [[ ! -d ${api_path} ]]; then
        print_error "Unable to locate the cphalcon base directory"
        exit ${ST_ERR}
    fi

    for version in ${versions}; do
        printf "Update the API docs for ${version}...\n"
        rm -rf "${api_path}/${version}"
        mkdir -p "${api_path}/${version}"
        ${GIT_BIN} clone -q -b "${version}.x" --depth=1 "${CPHALCON_REPO}" "${api_path}/${version}"
        printf "${YELLOW}TODO:${NC} regenerate the API doc\n"
        printf "${YELLOW}TODO:${NC} copy the generated API doc to the ./docs/${version}/en/api\n"
        printf "Done\n"
    done
}

pull_latest_changes() {
    validate_git_bin

    declare current_branch=`${GIT_BIN} rev-parse --abbrev-ref HEAD`

    printf "Current branch is ${YELLOW}${current_branch}${NC}.\n"

    if [[ ${current_branch} != master ]]; then
        print_error "Doing nothing: only the master branch may be deployed for this project."
    else
        printf "Pull the latest changes from the git repo...\n"

        pushd ${WORK_DIR}

        ${GIT_BIN} checkout -f
        ${GIT_BIN} pull origin ${current_branch}

        popd
    fi
}

for key in $@; do
    case ${key} in
        --help|-H)
            print_help
            exit ${ST_HLP}
            ;;
        --version|-V)
            print_version
            exit ${ST_HLP}
            ;;
        --dumpversion)
            print_dump_version
            exit ${ST_HLP}
            ;;
        --list-versions|-L)
            print_versions
            exit ${ST_HLP}
            ;;
        --install-deps)
            INSTALL_DEPS=1
            shift
            ;;
        --no-install-deps)
            INSTALL_DEPS=0
            shift
            ;;
        --generate-api)
            REGENERATE_API=1
            shift
            ;;
        --no-generate-api)
            REGENERATE_API=0
            shift
            ;;
        --update-docs)
            UPDATE_DOCS=1
            shift
            ;;
        --no-update-docs)
            UPDATE_DOCS=0
            shift
            ;;
        --pull-changes)
            PULL_CHANGES=1
            shift
            ;;
        --no-pull-changes)
            PULL_CHANGES=0
            shift
            ;;
        --working-dir=*)
            WORK_DIR="${key#*=}"
            shift
            ;;
        -*)
            # unknown option
            print_unknown_option $1
            exit ${ST_HLP}
            ;;
        *)
            # No more options
            break
            ;;
    esac
done

validate_work_dir

if [[ "${PULL_CHANGES}" -eq 1 ]]; then
    pull_latest_changes
fi

if [[ "${INSTALL_DEPS}" -eq 1 ]]; then
    install_app_deps
fi

if [[ "${UPDATE_DOCS}" -eq 1 ]]; then
    update_docs
fi

if [[ "${REGENERATE_API}" -eq 1 ]]; then
    update_api
fi

echo -e "Clear the cache..."
./phalcon -clear-cache

exit ${ST_OK}
